#!/usr/bin/env bash

# Shell prompt based on the Solarized Dark theme.
# Screenshot: http://i.imgur.com/EkEtphC.png
# Heavily inspired by @necolas’s prompt: https://github.com/necolas/dotfiles
# iTerm → Profiles → Text → use 13pt Monaco with 1.1 vertical spacing.

# Function to generate PS1.
export PROMPT_COMMAND=__prompt_command

# Disable the default virtualenv prompt change since we set our own custom one.
export VIRTUAL_ENV_DISABLE_PROMPT=1

# Set colors for kube_ps1 prompt.
export KUBE_PS1_SYMBOL_COLOR=37 # cyan
export KUBE_PS1_CTX_COLOR=33    # blue
export KUBE_PS1_NS_COLOR=61     # violet

# PS2 is the continuation prompt which is the promt given below the first line
# for multi-line commands.
if tput setaf 1 &>/dev/null; then
	tput sgr0 # reset colors
	reset=$(tput sgr0)
	green=$(tput setaf 64)
else
	reset="\e[0m"
	green="\e[1;32m"
fi

PS2="\[${green}\]→ \[${reset}\]"
export PS2

if [[ $COLORTERM == gnome-* && $TERM == xterm ]] && infocmp gnome-256color >/dev/null 2>&1; then
	export TERM='gnome-256color'
elif infocmp xterm-256color >/dev/null 2>&1; then
	export TERM='xterm-256color'
fi

__prompt_command() {
	# We need to capture the exit code of the last command first, before we run any of the commands
	# below which will have their own exit codes.
	local last_exit="$?"

	local bold=""
	local reset=""

	local blue=""
	local cyan=""
	local green=""
	local orange=""
	local red=""
	local violet=""
	local white=""
	local yellow=""

	local host_style=""
	local host_prompt=""
	local user_style=""

	if tput setaf 1 &>/dev/null; then
		tput sgr0 # reset colors
		bold=$(tput bold)
		reset=$(tput sgr0)

		# Solarized colors, taken from http://git.io/solarized-colors.
		blue=$(tput setaf 33)
		cyan=$(tput setaf 37)
		green=$(tput setaf 64)
		orange=$(tput setaf 166)
		red=$(tput setaf 124)
		violet=$(tput setaf 61)
		white=$(tput setaf 15)
		yellow=$(tput setaf 136)
	else
		bold=''
		reset="\e[0m"

		blue="\e[1;34m"
		cyan="\e[1;36m"
		green="\e[1;32m"
		orange="\e[1;33m"
		red="\e[1;31m"
		violet="\e[1;35m"
		white="\e[1;37m"
		yellow="\e[1;33m"
	fi

	# Highlight the user name when logged in as root.
	if [[ "${USER}" == "root" ]]; then
		user_style="${red}"
	else
		user_style="${green}"
	fi

	# Display and highlight the hostname when connected via SSH.
	if [[ "${SSH_TTY}" ]]; then
		host_style="${bold}${cyan}"
		host_prompt="\[${white}\]@\[${host_style}\]\h"
	fi

	# Set the terminal title and prompt.
	PS1="\[\033]0;\W\007\]"    # working directory base name
	PS1+="\[${bold}\]\n"       # newline
	PS1+="\[${user_style}\]\u" # username
	PS1+="${host_prompt}"      # host
	PS1+="\[${white}\]:"
	PS1+="\[${blue}\]\w"                                                        # working directory full path
	PS1+="\$(__prompt_git \"\[${white}\] on \[${violet}\]\" \"\[${yellow}\]\")" # Git repository details

	# Add an indicator to the prompt if a Python virtualenv is active.
	PS1+="\[${orange}\]\$(__prompt_virtualenv)"

	PS1+="\[${white}\]\$(__prompt_kube)"

	PS1+="\n"

	# Color `$` based on status code of previous command, green if it was zero,
	# red if it was non-zero and then reset the color.
	if [ $last_exit != 0 ]; then
		PS1+="\[${red}\]\$ \[${reset}\]" # Add red if exit code non 0
	else
		PS1+="\[${green}\]\$ \[${reset}\]"
	fi
}

__prompt_git() {
	local s=''
	local branchName=''

	# Check if the current directory is in a Git repository.
	if [ "$(
		git rev-parse --is-inside-work-tree &>/dev/null
		echo "${?}"
	)" == '0' ]; then

		# check if the current directory is in .git before running git checks
		if [ "$(git rev-parse --is-inside-git-dir 2>/dev/null)" == 'false' ]; then
			# Check if there have been any changes.
			if [ -n "$(git status --porcelain)" ]; then
				s+='dirty'
			fi
		fi

		# Get the short symbolic ref.
		# If HEAD isn’t a symbolic ref, get the short SHA for the latest commit
		# Otherwise, just give up.
		branchName="$(git symbolic-ref --quiet --short HEAD 2>/dev/null ||
			git rev-parse --short HEAD 2>/dev/null ||
			echo '(unknown)')"

		[ -n "${s}" ] && s=" (${s})"

		echo -e "${1}${branchName}${2}${s}"
	else
		return
	fi
}

__prompt_kube() {
	local kube=""

	kube="$(kube_ps1)"
	[[ -n "$kube" ]] && echo " $kube"
}

# __prompt_virtualenv indicates whether a Python virtualenv is active. It is adapated from
# https://stackoverflow.com/questions/10406926/how-do-i-change-the-default-virtualenv-prompt.
__prompt_virtualenv() {
	local venv=''

	if [[ -n "$VIRTUAL_ENV" ]]; then
		venv="${VIRTUAL_ENV##*/}"
	else
		venv=''
	fi
	[[ -n "$venv" ]] && echo " ($venv)"
}
